#!/usr/bin/env bash

# Runs makemap.py multiple times, removes grains without enough peaks
# Should enter nine variables: nX.ubi, n(X-1).flt, nX.flt, initial cuts, final cuts,
#   stop limit, min number of peaks, full path to .par file, crystal symmetry

LIMIT=$6			# Minimum difference in remaining peaks after running makemap.py
MINPEAKS=$7			# Minimum number of peaks a seed grain needs to be retained in the
					# final list
PARS=$8				# Full path to the parameters file
CRYSYMM=$9			# Crystal symmetry, e.g. "cubic"

if [ $# == 9 ]; then
	echo -e "\n-- Nine arguments were passed to makemap.py --"
# 	echo "Input grains: $1"
# 	echo "Output grains: $1"
# 	echo "Peaks in: $2"
# 	echo "Peaks out: $3"
# 	echo "Initial cuts: $4"
# 	echo "Final cuts: $5"
# 	echo "Stop limit for makemap.py: $6"
# 	echo "Minium number of peaks: $7"

	# ${tempVar1%.*} removes the .ubi from nX.ubi, which is input from user
	tempVar1=$1
	prefix2=${tempVar1%.*}


	#############################################################################
	# Run makemap.py until the number of remaining peaks doesn't change by much #
	#############################################################################
	echo -e "\nBeginning makemap loop 1 with cuts (-t $4) ..."
	makemap.py -p $PARS -u $1 -U $1 -f $2 -F $3 -t $4 -s $CRYSYMM > makemapTempOut.txt
	grepOut0=$(grep Before makemapTempOut.txt)
	grepOut1=$(grep After makemapTempOut.txt)
	rm -f makemapTempOut.txt
	pks0=${grepOut0:17}
	pks1=${grepOut1:16}
	echo "Initial number of peaks: $pks0"
	echo "Number of remaining peaks: $pks1"
	(( a = 1 ))		# Why did I do this? http://tldp.org/LDP/abs/html/dblparens.html

	# Keep running makemap.py until the number of remaining peaks changes by less than
	# the LIMIT set above; because var0 is initialized to LIMIT+1, the loop will always
	# be run at least one time.
	var0=$(($LIMIT+1))
	while [ "$var0" -ge "$LIMIT" ];	do

		grepOut=$(makemap.py -p $PARS -u $1 -U $1 -f $2 -F $3 -t $4 -s $CRYSYMM | grep After)
		pks2=${grepOut:16}
		echo Number of remaining peaks: $pks2
		(( a++ ))

		var0=`expr $pks1 - $pks2`	# difference in number of peaks remaining
		var0=${var0#-}				# absolute value - from BASH Cookbook; removes - sign

		pks1=$pks2
	done

	echo " makemap.py was run $a times!"


	##################################################################
	# Now remove grains from .ubi file with #npks less than MINPEAKS #
	##################################################################
	filename=$1
	count=0
	breaklinenum=0

	while read line; do
	  (( count++ ))

	#	This prints the line numbers of the lines containing the text "#npks"
	# 	echo "$line" | grep -q "#npks" && echo "$count"

		if echo "$line" | grep -q "#npks"; then
			stringarray=($line)
			if [ ${stringarray[1]} -lt $MINPEAKS ]; then
				breaklinenum=$(($count - 3))	# Block begins 3 lines before '#npks'
				echo "Deleting from line $breaklinenum on!"
				break
			fi
		fi
	done < $filename	# '<' redirects following file to entire loop, so the loop reads this file

	# head prints the first -n Number of lines in a file
	if [ $breaklinenum -gt 1 ]; then
		echo "Removing grains with fewer than $MINPEAKS"
		head -n $(($breaklinenum - 2)) $filename > tempUBI.txt
		mv tempUBI.txt $filename
	elif [ $breaklinenum -eq 1 ]; then
		echo "All seed grains are bad."
		echo "Deleting all $prefix2 files!"
		rm -f $prefix2.*
	else
		echo "All grains have at least $MINPEAKS peaks."
	fi


	######################################################################################
	# Run makemap.py again (with tighter cuts) until the number of remaining peaks does  #
	# not change by much																 #
	######################################################################################
	if [ -f $1 ]; then
		echo -e "\nBeginning makemap loop 2 with cuts (-t $5) ..."
		grepOut=$(makemap.py -p $PARS -u $1 -U $1 -f $2 -F $3 -t $5 -s $CRYSYMM | grep After)
		pks1=${grepOut:16}
		echo Number of remaining peaks: $pks1
		(( a = 1 ))

		# Keep running makemap.py until the number of remaining peaks changes by less than
		# the LIMIT set above; because var0 is initialized to LIMIT+1, the loop will always
		# be run at least one time.
		var0=$(($LIMIT+1))
		while [ "$var0" -ge "$LIMIT" ];	do

			grepOut=$(makemap.py -p $PARS -u $1 -U $1 -f $2 -F $3 -t $5 -s $CRYSYMM | grep After)
			pks2=${grepOut:16}
			echo Number of remaining peaks: $pks2
			(( a++ ))

			var0=`expr $pks1 - $pks2`	# difference in number of peaks remaining
			var0=${var0#-}				# absolute value - from BASH Cookbook; removes - sign

			pks1=$pks2
		done

		echo " makemap.py was run $a more times!"
	fi

else
	echo
	echo "Wrong number of arguments entered!"
	echo
	echo "# Should enter nine variables: nX.ubi, n(X-1).flt, nX.flt, initial cuts, final cuts,"
	echo "#   stop limit, min number of peaks, full path to .par file, crystal symmetry."
	echo '#'
	echo '# Example:'
	echo "# makemap_all nall.ubi n00.flt rest.flt 0.03 0.02 5 100 NF_final.par cubic"
	echo
fi

exit 0
